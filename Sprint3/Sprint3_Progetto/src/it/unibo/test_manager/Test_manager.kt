/* Generated by AN DISI Unibo */ 
package it.unibo.test_manager

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_manager ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var ERROR: Boolean = false  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name IDLE...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="start", cond=doswitch() )
				}	 
				state("start") { //this:State
					action { //it:State
						observeResource("127.0.0.1","8014","ctx_wis","waste_storage","waste_qty")
						forward("waste_in", "waste_in(1)" ,"waste_storage" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_start", 
				 	 					  scope, context!!, "local_tout_"+name+"_start", 15000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t00",targetState="fail",cond=whenTimeout("local_tout_"+name+"_start"))   
					transition(edgeName="t01",targetState="added_rp",cond=whenDispatch("waste_qty"))
				}	 
				state("added_rp") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("waste_qty(X)"), Term.createTerm("waste_qty(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("$name Quantità nel waste storage: ${payloadArg(0)}")
								if(  payloadArg(0).toInt() != 50  
								 ){ ERROR = true  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="fail", cond=doswitchGuarded({ ERROR  
					}) )
					transition( edgeName="goto",targetState="ask_to_get", cond=doswitchGuarded({! ( ERROR  
					) }) )
				}	 
				state("ask_to_get") { //this:State
					action { //it:State
						forward("get_waste", "get_waste(1)" ,"waste_storage" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_ask_to_get", 
				 	 					  scope, context!!, "local_tout_"+name+"_ask_to_get", 15000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t02",targetState="fail",cond=whenTimeout("local_tout_"+name+"_ask_to_get"))   
					transition(edgeName="t03",targetState="update_qty",cond=whenDispatch("waste_qty"))
				}	 
				state("update_qty") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("waste_qty(X)"), Term.createTerm("waste_qty(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("$name Quantità nel waste storage: ${payloadArg(0)}")
								if(  payloadArg(0).toInt() != 0  
								 ){ ERROR = true  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="fail", cond=doswitchGuarded({ ERROR  
					}) )
					transition( edgeName="goto",targetState="end", cond=doswitchGuarded({! ( ERROR  
					) }) )
				}	 
				state("fail") { //this:State
					action { //it:State
						answer("start_test", "fail", "fail(1)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("end") { //this:State
					action { //it:State
						answer("start_test", "successful", "successful(1)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 

/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
					var ash_qty = 0
					var waste_qty = 0
					var isBurning: Boolean = false;
					var robot_waiting: Boolean = false;
					var conditions_verified: Boolean = false;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						observeResource("localhost","8014","ctx_wis","waste_storage","waste_qty")
						CommUtils.outblack("$name INIZIATO")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="robotWaiting",cond=whenDispatch("waiting"))
					transition(edgeName="t01",targetState="updateWasteQty",cond=whenDispatch("waste_qty"))
					transition(edgeName="t02",targetState="startBurningPhase",cond=whenDispatch("burn_start"))
					transition(edgeName="t03",targetState="endBurningPhase",cond=whenDispatch("burn_end"))
				}	 
				state("robotWaiting") { //this:State
					action { //it:State
						 robot_waiting = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="verifyConditions", cond=doswitch() )
				}	 
				state("updateWasteQty") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("waste_qty(X)"), Term.createTerm("waste_qty(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 waste_qty = payloadArg(0).toInt()/50  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="verifyConditions", cond=doswitch() )
				}	 
				state("startBurningPhase") { //this:State
					action { //it:State
						 isBurning = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="robotWaiting",cond=whenDispatch("waiting"))
					transition(edgeName="t05",targetState="updateWasteQty",cond=whenDispatch("waste_qty"))
					transition(edgeName="t06",targetState="startBurningPhase",cond=whenDispatch("burn_start"))
					transition(edgeName="t07",targetState="endBurningPhase",cond=whenDispatch("burn_end"))
				}	 
				state("endBurningPhase") { //this:State
					action { //it:State
						 isBurning = false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="verifyConditions", cond=doswitch() )
				}	 
				state("verifyConditions") { //this:State
					action { //it:State
						if(  robotWaiting && !isBurning && waste_qty > 0  
						 ){forward("start_robot", "start_robot(1)" ,"op_robot" ) 
						 robotWaiting = false  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="robotWaiting",cond=whenDispatch("waiting"))
					transition(edgeName="t09",targetState="updateWasteQty",cond=whenDispatch("waste_qty"))
					transition(edgeName="t010",targetState="startBurningPhase",cond=whenDispatch("burn_start"))
					transition(edgeName="t011",targetState="endBurningPhase",cond=whenDispatch("burn_end"))
				}	 
			}
		}
} 

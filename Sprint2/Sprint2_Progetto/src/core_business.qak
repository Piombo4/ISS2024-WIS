System -trace wis
 
// WIS
Dispatch start_robot : start_robot(X)

// op_robot  
Dispatch waiting : waiting(X)
 
// WASTE STORAGE
Dispatch waste_in : waste_in(X)
Dispatch waste_qty : waste_qty(X)
Dispatch get_waste : get_waste(X)

// INCINERATOR
Dispatch turn_on : turn_on(X)
Dispatch burn_in : burn_in(X)
Dispatch burn_start : burn_start(X)
Dispatch burn_end : burn_end(X)
Dispatch get_ash : get_ash(X)

// ASH STORAGE
Dispatch deposit_ash : deposit_ash(X)
Request empty_ash : empty_ash(X)
Reply ashes_taken : ashes_taken(LEVEL) for empty_ash

// BASIC ROBOT
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO)
Dispatch setdirection : dir( D )
Dispatch setrobotstate: setpos(X,Y,D)

Request engage        : engage(OWNER,STEPTIME)	
Reply   engagedone    : engagedone(ARG) for engage 
Reply   engagerefused : engagerefused(ARG) for engage 

Dispatch disengage    : disengage(ARG)
//LED
Dispatch led_status : led_status(X)

//SONAR
Dispatch ash_level : ash_level(LEVEL)
Event sonardata    : distance(D)   //emitted  by sonardevice  

Dispatch sonarwork : sonarwork(X)
Dispatch doread    : doread(X)

Context ctx_wis  ip  [host="localhost" port=8014]
Context ctx_basic_robot ip  [host="127.0.0.1" port=8020]
Context ctx_monitoring_device  ip  [host="127.0.0.2" port=8021]

ExternalQActor basicrobot context ctx_basic_robot

QActor mock context ctx_wis {
	State s0 initial {
		delay 500
		forward waste_storage -m waste_in:waste_in(1)	
		delay 15000
		request ash_storage -m empty_ash:empty_ash(1)
	}
	
	Transition t0 whenReply ashes_taken -> reply
	
	State reply  {
		delay 15000
	}
	Goto s0
}
 
QActor wis context ctx_wis {
	[#
			var ash_qty = 0
			var waste_qty = 0
			var ash_level = 0
			var isBurning: Boolean = false;
			var robot_waiting: Boolean = false;
			val DLIMT: Int = 5;
			val DMIN: Int = 25;
	#]
	State s0 initial{ 
		[#ash_level= DMIN#]
		delay 500
		observeResource waste_storage msgid waste_qty
		observeResource sonar msgid ash_level
		forward incinerator -m turn_on:turn_on(1)
        println("$name INIZIATO") color green
	}
	
	Transition t0
		whenMsg waiting -> robotWaiting
		whenMsg waste_qty -> updateWasteQty
		whenMsg burn_start -> startBurningPhase
		whenMsg burn_end -> endBurningPhase
		whenMsg ash_level -> updateAshLevel
	
	State updateAshLevel{
		onMsg(ash_level:ash_level(N)){
			[# ash_level = payloadArg(0).toInt();#]
			if [# ash_level < DLIMT || ash_level >= DMIN #]
			{
				forward led -m led_status:led_status(BLINK)
			}			
		}
	}
	Goto verifyConditions
	
	State robotWaiting{
		[# robot_waiting = true #]
	}
	
	Goto verifyConditions
	
	State updateWasteQty{
		onMsg(waste_qty:waste_qty(N)){
			[# waste_qty = payloadArg(0).toInt()/50 #]
		}
	}
	
	Goto verifyConditions
		
	State startBurningPhase{
		[# isBurning = true #]
		forward led -m led_status:led_status(ON)
	}
	
	Transition t0
		whenMsg waiting -> robotWaiting
		whenMsg waste_qty -> updateWasteQty
		whenMsg burn_start -> startBurningPhase
		whenMsg burn_end -> endBurningPhase
		
	State endBurningPhase{
		[# isBurning = false #]
		forward led -m led_status:led_status(OFF)
	}
	
	Goto verifyConditions
	
	State verifyConditions{
		if [# robot_waiting && !isBurning && waste_qty > 0 && ash_level >= DLIMT#]{
			
			forward op_robot -m start_robot:start_robot(1)		
			[# robot_waiting = false #]
		}
	}
	
	Transition t0
		whenMsg waiting -> robotWaiting
		whenMsg waste_qty -> updateWasteQty
		whenMsg burn_start -> startBurningPhase
		whenMsg burn_end -> endBurningPhase
	
}


QActor op_robot context ctx_wis  { 
	import "wis.util.*"
	[#  
		var RP: Boolean = false;
		var ASH: Boolean = false;
		var T: String = ""; 
		var X = "";
		var Y = "";
		var D = "";
	#]
	 
	State s0 initial { 
		delay 500
		println("$name INIZIATO") color green 
		solve(consult("sysRules.pl"))
		solve(consult("pointPicker.pl"))
		solve(consult("positions.pl"))
	}
	
	Goto engage
	
	State engage {
		
		request basicrobot -m engage:engage($MyName,300)
		
	}
	
	Transition t0 whenReply engagedone -> waiting
		whenReply engagerefused -> engage
	 
	State waiting {
		forward wis -m waiting:waiting(1)
	}
	
	Transition t0 whenMsg start_robot -> to_ws
	
	State to_ws {
		[# T = Position.wastein.name; #]
		solve( getPoint($T,TX,TY,TDIR) )
		[# X = getCurSol("TX").toString(); #]
		[# Y = getCurSol("TY").toString(); #]
		[# D = getCurSol("TDIR").toString(); #]
		
		request basicrobot -m moverobot:moverobot($X,$Y)
		delay 500
		forward basicrobot -m setdirection:dir($D)
	}
	
	Transition t1 whenReply moverobotdone -> withdraw_ws
				  
				  
    State withdraw_ws {
    	delay 1500
    	forward waste_storage -m get_waste:get_waste(1)
    	[# RP = true; #]
    }
    
    Goto to_incinerator
    
    State to_incinerator {
    	
    	[# T = Position.burnin.name; #]
		solve( getPoint($T,TX,TY,TDIR) )
		[# X = getCurSol("TX").toString(); #]
		[# Y = getCurSol("TY").toString(); #]
		[# D = getCurSol("TDIR").toString(); #]
		
		request basicrobot -m moverobot:moverobot($X,$Y)
		delay 500
		forward basicrobot -m setdirection:dir($D)
    }
    
    Transition t2 whenReply moverobotdone -> ask_to_burn
				  whenReply moverobotfailed -> to_incinerator

	State ask_to_burn {
		delay 1500
		forward incinerator -m burn_in:burn_in(1)
		[# RP = false #]
	}
	
	Goto go_wait_home
	
	State go_wait_home {
		[# T = Position.home.name; #]
		solve( getPoint($T,TX,TY,TDIR) )
		[# X = getCurSol("TX").toString(); #]
		[# Y = getCurSol("TY").toString(); #]
		[# D = getCurSol("TDIR").toString(); #]
		
		request basicrobot -m moverobot:moverobot($X,$Y)
		delay 500
		forward basicrobot -m setdirection:dir($D)
	}
    
    Transition t3 whenReply moverobotdone -> wait_for_burn
				  whenReply moverobotfailed -> go_back_home
				  
	State wait_for_burn {
		delay 1500
	}
	
	Transition t4 whenMsg burn_end -> to_incinerator_burned
	
	State to_incinerator_burned {
		[# T = Position.burnout.name; #]
		solve( getPoint($T,TX,TY,TDIR) )
		[# X = getCurSol("TX").toString(); #]
		[# Y = getCurSol("TY").toString(); #]
		[# D = getCurSol("TDIR").toString(); #]
		
		request basicrobot -m moverobot:moverobot($X,$Y)
		delay 500
		forward basicrobot -m setdirection:dir($D)
	}
	
	Transition t5 whenReply moverobotdone -> get_ash
				  whenReply moverobotfailed -> to_incinerator_burned
	
	State get_ash {
		delay 1500
		forward incinerator -m get_ash:get_ash(1)
		[# ASH = true #] 
	}
	
	Goto to_ash_storage
	
	State to_ash_storage {
		[# T = Position.ashout.name; #]
		solve( getPoint($T,TX,TY,TDIR) )
		[# X = getCurSol("TX").toString(); #]
		[# Y = getCurSol("TY").toString(); #]
		[# D = getCurSol("TDIR").toString(); #]
		
		request basicrobot -m moverobot:moverobot($X,$Y)
		delay 500
		forward basicrobot -m setdirection:dir($D)
	}
	
	Transition t6 whenReply moverobotdone -> ask_as
				  whenReply moverobotfailed -> to_ash_storage
	
	State ask_as {
		delay 1500
		forward ash_storage -m deposit_ash:deposit_ash(1)
		[# ASH = false #] 
		
	}
	Goto go_back_home
	
	State go_back_home {
		
		[# T = Position.home.name; #]
		solve( getPoint($T,TX,TY,TDIR) )
		[# X = getCurSol("TX").toString(); #]
		[# Y = getCurSol("TY").toString(); #]
		[# D = getCurSol("TDIR").toString(); #]
		
		
		forward basicrobot -m setdirection:dir(up)
		delay 500
		request basicrobot -m moverobot:moverobot($X,$Y)
	}
	
	Transition t6 whenReply moverobotdone -> waiting
				  whenReply moverobotfailed -> go_back_home
}


QActor incinerator context ctx_wis{
	[# 
			var RP: Int = 0;
			val BTIME: Long = 4000L;
	#]
	
	State s0 initial { 
		delay 500
		println("$name INIZIATO") color green
	}
	
	Transition t0 whenMsg turn_on -> ready
	
	State ready {
		println("$name Acceso inceneritore")
	}
	
	Transition t1 whenMsg burn_in -> burn_rp
	
	State burn_rp {
		[# var RP = 1; #]
		forward wis -m burn_start:burn_start(1)
		delayVar BTIME
		
		forward wis -m burn_end:burn_end(1)
		forward op_robot -m burn_end:burn_end(1)
	}
	
	Transition t1 whenMsg get_ash -> get_ash
	
	State get_ash {
		[# var RP = 0; #]
	}
	
	Goto ready
}


QActor ash_storage context ctx_wis{
	[#
			var ash_qty: Int = 0;
			var R: Int = 0;
			val MAX: Int = 4;
	#]
	
	State s0 initial {
		delay 500
		println("$name INIZIATO") color green
	}
	
	Transition t0 
		whenRequest empty_ash -> removeAsh
		whenMsg deposit_ash -> addAsh
	
	State addAsh{
		if[#ash_qty<MAX#]{
			[#	ash_qty++  #]
			println("$name Depositata la cenere di un RP!")
		}else{
			println("$name Deposito pieno! ")
		}
	}
	Transition t0 
		whenRequest empty_ash -> removeAsh
		whenMsg deposit_ash -> addAsh
	
	State removeAsh{
		[# R = ash_qty; #]
		[# ash_qty = 0; #]
		
		replyTo empty_ash with ashes_taken : ashes_taken($R)
		println("$name Prelevata $R cenere")
	}
}


QActor waste_storage context ctx_wis{
	[#
			var scale: Int = 0;
	#]
	
	State s0 initial{ 
		delay 500
		println("$name INIZIATO") color green
	}
	
	Transition t0 
		whenMsg waste_in -> addRP
		whenMsg get_waste -> removeRP
	
	State addRP{
		[#	scale += 50;  #]
		updateResource [# "waste_qty($scale)" #]
		println("$name Depositato un RP!")
	}
	Transition t0 
		whenMsg waste_in -> addRP
		whenMsg get_waste -> removeRP
	
	State removeRP{
		[#	scale -= 50  #]
		updateResource [# "scaleinfo($scale)" #]
		println("$name Prelevato un RP!")
	}
}
QActor led context ctx_monitoring_device{
	[#
	lateinit var p : Process	
	#]
	
	State s0 initial{
		delay 500   
		println("$name STARTS") color green
	}
	Transition t0 whenMsg led_status -> updateLed
	
	State updateLed{
		onMsg(led_status:led_status(X)){
			[#
				 p.destroy()
    				 if (p.isAlive()) {
    	    			p.destroyForcibly();
    					}
				if(payloadArg(0) == "ON"){
					
    				p = Runtime.getRuntime().exec("python LedOn.py")
				}
				else if(payloadArg(0)== "OFF"){
					
    				p = Runtime.getRuntime().exec("python LedOff.py")
				}
				else {
					if(payloadArg(0) == "ON"){
    				p = Runtime.getRuntime().exec("python LedBlink.py")
				}
				
			#]			
		}
	}
	Transition t0 whenMsg led_status -> updateLed
	
}

QActor sonar context ctx_monitoring_device{   
	State s0 initial{  
		println("sonar24 | ready") 
		delay 1000 //give time to start sonardevice ...
		subscribeTo sonardevice for sonardata
 	}
	Goto work
	
	State work{
		//println("sonar24 | waits ... ") 		
	}
	Transition t0 whenEvent sonardata -> handlesonardata
 	 
	State handlesonardata{
		printCurrentMessage color yellow
		onMsg( sonardata : distance(D) ){
			println("$name | distance=${payloadArg(0)}") color magenta
			updateResource [# "ash_level(payloadArg(0))" #]
		}
		
	}
	Goto work 
	 
 }   
 
QActor sonardevice context ctx_monitoring_device{
[# 
	lateinit var reader : java.io.BufferedReader
	var working = false
    lateinit var p : Process	
    var Distance = 0
#]	
	State s0 initial{
		println("$name | sonarstart") 
	}	
	Goto startTheSonar
 	
	State startTheSonar{
	[#
    	working = true		
		p       = Runtime.getRuntime().exec("python sonar.py")
		reader  = java.io.BufferedReader(  java.io.InputStreamReader(p.getInputStream() ))	
	#]		
	}
	Goto readSonarData
	
	State readSonarData{
	[# 
		var data = reader.readLine()
		CommUtils.outyellow("$name with python: data = $data"   ) 
		if( data != null ){
		try{ 
			val vd = data.toFloat()
			val v  = vd.toInt()
			if( v <= 100 ){	//A first filter ...
				Distance = v				
			}else Distance = 0
		}catch(e: Exception){
				CommUtils.outred("$name readSonarDataERROR: $e "   )
		}
		}//if
		
	#]	
		if [# Distance > 0 #] { 
		    println("$name with python: data = $data"   ) color yellow
			emitlocalstream sonardata : distance($Distance)
			//emit  sonardata : distance($Distance)
		}
		autodispatch doread : doread(1)
	}
	Transition t0 
 		whenMsg doread and [# working   #]   -> readSonarData 
		whenMsg doread and [# ! working #] -> endOfRead
		
	State endOfRead{
		[#
			
   	    p.destroy()
    	if (p.isAlive()) {
    	    p.destroyForcibly();
    	}
       	CommUtils.outred("$tt $name | endOfRead"  )
			
		#]
	}
}//sonardevice
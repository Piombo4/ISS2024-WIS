System test_architettura

Request start_test: start_test(N)
Dispatch start_robot: start_robot(N)
Dispatch qty: qty(N)
Reply reply_qty : reply_qty(N)

Context ctx_wastestorage  ip  [host="127.0.0.1" port=8015]
Context ctx_ashstorage  ip  [host="127.0.0.2" port=8016]
Context ctx_oprobot  ip  [host="127.0.0.3" port=8017]
Context ctx_test  ip  [host="localhost" port=8018]

ExternalQActor waste_storage context ctx_wastestorage
ExternalQActor ash_storage context ctx_ashstorage
ExternalQActor op_robot context ctx_oprobot

QActor test_manager context ctx_test { 
	State s0 initial{ 
		
	}
	Goto idle
	
	State idle{	
		println("$name IDLE...")	
	}
	Transition t0 
		whenRequest start_test -> start
		
	State start{
		observeResource waste_storage msgid qty
		forward op_robot -m start_robot : start_robot(1)
	}
	Transition t0 
		whenTime 15000 -> fail
		whenMsg qty -> updateQty
		
	State updateQty{
		onMsg(qty: qty(N)){
			println("$name Quantità nel waste storage: $N")
			replyTo start_test with reply_qty : reply_qty($N) 
		}
	}
	
	State fail {
		replyTo start_test with reply_qty : reply_qty(999) 
	}
}

QActor test_manager_ash context ctx_test { 
	State s0 initial{ 
		
	}
	Goto idle
	
	State idle{	
		println("$name IDLE...")	
	}
	Transition t0 
		whenRequest start_test -> start
		
	State start{
		observeResource ash_storage msgid qty
		forward op_robot -m start_robot : start_robot(1)
	}
	Transition t0 
	whenTime 15000 -> fail
		whenMsg qty -> updateQty
		
	
	State updateQty{
		onMsg(qty: qty(N)){
			println("$name Quantità nel waste storage: $N")
			replyTo start_test with reply_qty : reply_qty($N) 
		}
	}

	State fail {
		replyTo start_test with reply_qty : reply_qty(999) 
	}
}

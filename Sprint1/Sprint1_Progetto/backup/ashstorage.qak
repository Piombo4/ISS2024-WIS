System ashstorage

// WIS
Dispatch start_robot : start_robot(X)

// OPROBOT
Dispatch waiting : waiting(X)

// WASTE STORAGE
Dispatch waste_in : waste_in(X)
Dispatch waste_qty : waste_qty(X)
Dispatch get_waste : get_waste(X)

// INCINERATOR
Dispatch turn_on : turn_on(X)
Dispatch burn_in : burn_in(X)
Dispatch burn_start : burn_start(X)
Dispatch burn_end : burn_end(X)
Dispatch get_ash : get_ash(X)

// ASH STORAGE
Dispatch deposit_ash : deposit_ash(X)
Request empty_ash : empty_ash(X)
Reply ashes_taken : ashes_taken(LEVEL) for empty_ash

// BASIC ROBOT
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO)

Context ctx_wis  ip  [host="localhost" port=8016]
Context ctx_external_entity  ip  [host="127.0.0.1" port=8017]

ExternalQActor external_entity context ctx_external_entity

QActor ash_storage context ctx_wis{
	[#
			var ash_qty: Int = 0;
			var R: Int = 0;
			val MAX: Int = 4;
	#]
	
	State idle initial {
		println("$name INIZIATO")
	}
	
	Transition t0 
		whenRequest empty_ash -> removeAsh
		whenMsg deposit_ash -> addAsh
	
	State addAsh{
		if[#ash_qty<MAX#]{
			[#	ash_qty++  #]
			println("$name Depositata la cenere di un RP!")
		}else{
			println("$name Deposito pieno! ")
		}
	}
	Transition t0 
		whenRequest empty_ash -> removeAsh
		whenMsg deposit_ash -> addAsh
	
	State removeAsh{
		[# R = ash_qty; #]
		[# ash_qty = 0; #]
		
		replyTo empty_ash with ashes_taken : ashes_taken($R)
		println("$name Prelevata $R cenere")
	}
}
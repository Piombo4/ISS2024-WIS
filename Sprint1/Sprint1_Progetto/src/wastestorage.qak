System wastestorage

// WIS
Dispatch start_robot : start_robot(X)

// OPROBOT
Dispatch waiting : waiting(X)

// WASTE STORAGE
Dispatch waste_in : waste_in(X)
Dispatch waste_qty : waste_qty(X)
Dispatch get_waste : get_waste(X)

// INCINERATOR
Dispatch turn_on : turn_on(X)
Dispatch burn_in : burn_in(X)
Dispatch burn_start : burn_start(X)
Dispatch burn_end : burn_end(X)
Dispatch get_ash : get_ash(X)

// ASH STORAGE
Dispatch deposit_ash : deposit_ash(X)
Request empty_ash : empty_ash(X)
Reply ashes_taken : ashes_taken(LEVEL)

// BASIC ROBOT
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO)

Context ctx_wastestorage  ip  [host="localhost" port=8016]
Context ctx_oprobot  ip  [host="127.0.0.1" port=8017]
Context ctx_mock_external_entity  ip  [host="127.0.0.2" port=8018]

ExternalQActor op_robot context ctx_oprobot
ExternalQActor mock_external_entity context ctx_mock_external_entity

QActor waste_storage context ctx_wastestorage{
	[#
			var scale = 0
	#]
	State s0 initial{ 
		
	}
	Goto idle
	
	State idle {
		println("$name IDLE...")
	}
	Transition t0 
		whenMsg waste_in -> addRP
		whenMsg get_waste -> removeRP
	
	State addRP{
		[#	scale += 50  #]
		println("$name Depositato un RP!")
	}
	Transition t0 
		whenMsg waste_in -> addRP
		whenMsg get_waste -> removeRP
	
	State removeRP{
		[#	scale -= 50  #]
		println("$name Prelevato un RP!")
	}
}
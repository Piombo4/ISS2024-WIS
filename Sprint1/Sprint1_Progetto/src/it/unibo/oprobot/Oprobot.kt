/* Generated by AN DISI Unibo */ 
package it.unibo.oprobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Oprobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				import "wis.util"; 
				var LOAD: boolean = false;
				var T: String = ""; 
				var TX,TY; 
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name STARTS")
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('pointPicker.pl')","") //set resVar	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="go_to_ws",cond=whenDispatch("start_robot"))
				}	 
				state("go_to_ws") { //this:State
					action { //it:State
						 T = Direction.WS.name;  
						solve("getPoint(T,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { TX = getCurSol(X); TY = getCurSol(Y);  
						}
						else
						{}
						request("moverobot", "moverobot($TX,$TY)" ,"basic_robot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="withdraw_ws",cond=whenReply("moverobotdone"))
					transition(edgeName="t12",targetState="go_to_ws",cond=whenReply("moverobotfailed"))
				}	 
				state("withdraw_ws") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
